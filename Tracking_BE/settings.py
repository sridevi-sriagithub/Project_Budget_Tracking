"""
Django settings for Tracking_BE project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = 'django-insecure-(%uj8x@5136&3_d6do-s$lew!*omgsf8qr8)-4@qldza2#a3j&'
SECRET_KEY=os.environ.get("SECRET_KEY","dev-secret")


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
DEBUG = os.environ.get('DEBUG', 'False') == 'True'

# ALLOWED_HOSTS = ["tracking-be.onrender.com", "localhost", "127.0.0.1"]
ALLOWED_HOSTS = ["*"]
ALLOWED_HOSTS= ["project-budget-tracking.onrender.com","localhost", "127.0.0.1"]
# ALLOWED_HOSTS = os.environ.get('DJANGO_ALLOWED_HOSTS',
#                               os.environ.get('KOYEB_PUBLIC_DOMAIN', 'localhost')).split(',')


CORS_ALLOW_ALL_ORIGINS = True 
CORS_ALLOW_CREDENTIALS=True
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000", 
    # "http://localhost:8000", 
#      "*" # Allow requests from React frontend Add on
]

# Add trusted origins for CSRF
CSRF_TRUSTED_ORIGINS = [
    "http://localhost:3000",
]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'login',
    'django_celery_results',
    # 'djcelery_email',
    'celery',
    'rest_framework',
    'rest_framework_simplejwt',
    'organization',
    'project_creation',
    'masterdata',
    # 'user_profile',
    'budget',
    'roles',
    'corsheaders',
    'bank_details',
    'task_creation',
    # 'corsheaders',
]

MIDDLEWARE = [
'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
]

ROOT_URLCONF = 'Tracking_BE.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'Tracking_BE.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'Tracking',
        'USER': 'postgres',
        'PASSWORD': 'postgres@sql',
        'HOST': 'localhost',
        'PORT': '5433'
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'


STATIC_ROOT = BASE_DIR / "staticfiles"
# Optional compression:
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.SessionAuthentication",
    ],
    # "EXCEPTION_HANDLER": "budget.utils.custom_exception_handler",
}

# JWT Settings
from datetime import timedelta
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=1),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
}

AUTH_USER_MODEL = 'login.User'

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_USE_SSL = False
EMAIL_HOST_USER = 'gedelasridevi02@gmail.com'
EMAIL_HOST_PASSWORD = 'qqdg hviv kjpj xyhd'




AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
]


CELERY_BROKER_URL = 'redis://localhost:6379/0'  # Redis connection URL (assuming Redis is running locally)
CELERY_RESULT_BACKEND = 'redis://127.0.0.1:6379/0'  # Where Celery stores results (Redis as well)
CELERY_ACCEPT_CONTENT = ['application/json']  # Celery task content serialization format
CELERY_TASK_SERIALIZER = 'json'  # Task serialization format
CELERY_RESULT_SERIALIZER = 'json'  # Result serialization format
CELERY_TIMEZONE = 'Asia/Kolkata'
CELERY_RESULT_BACKEND = 'django-db'
CELERY_CACHE_BACKEND = 'django-cache'
CELERY_CACHE_BACKEND = 'default'

CELERY_CACHE_BACKEND = 'default'

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.db.DatabaseCache',
        'LOCATION': 'my_cache_table',
    }
}
CELERY_TASK_ALWAYS_EAGER = True

# EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# EMAIL_BACKEND = 'djcelery_email.backends.CeleryEmailBackend'
# EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
CELERY_EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'

CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.locmem.LocMemCache",
    }
}
from django.core.files.storage import default_storage
from django.conf import settings
import os
from io import BytesIO
from reportlab.pdfgen import canvas

# Create PDF in memory
buffer = BytesIO()
c = canvas.Canvas(buffer)
c.drawString(100, 750, "Hello, this is a test PDF.")
c.save()

# Get PDF bytes
pdf_bytes = buffer.getvalue()
buffer.close()

# Define file path
pdf_path = os.path.join(settings.MEDIA_ROOT, 'invoices', 'INV-2025-16-2DBA60.pdf')

# Make sure directory exists
os.makedirs(os.path.dirname(pdf_path), exist_ok=True)

# Save the PDF to disk
with open(pdf_path, 'wb') as f:
    f.write(pdf_bytes)
